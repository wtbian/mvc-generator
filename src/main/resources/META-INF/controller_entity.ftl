package ${entity.javaPackage};

import com.alibaba.fastjson.JSON;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import freemarker.template.TemplateException;

import org.apache.commons.lang.math.NumberUtils;
import ${entity.commonPackage}.util.ArgsMap;

import ${entity.commonPackage}.domain.${entity.base?cap_first};
import ${entity.commonPackage}.vo.${entity.base?cap_first}VO;
import ${entity.commonPackage}.service.${entity.base?cap_first}Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

/**
* This code is generated by bianwentao
* @author bianwentao
*
*/
@RequestMapping(value = "/backmgmt/${entity.base}/")
@Controller
public class ${entity.base?cap_first}Controller<#if entity.superClass?has_content> extends ${entity.superClass} </#if>{

    private static final Logger logger = LoggerFactory.getLogger(${entity.className}.class);

    @Autowired
    private ${entity.base?cap_first}Service ${entity.base}Service;

    @RequestMapping(value = "", method = RequestMethod.GET)
    public void index(HttpServletRequest request, HttpServletResponse response) throws IOException, TemplateException, URISyntaxException {
    }

    @RequestMapping(value = "/toedit", method = RequestMethod.GET)
    public String toEdit() {
        return "${entity.base}edit";
    }

    @RequestMapping(value = "/toadd", method = RequestMethod.GET)
    public String toAdd() {
        return "${entity.base}add";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @ResponseBody
    public ResponseWrapper getById(@PathVariable("id") Integer id){
        ResponseWrapper responseWrapper = new ResponseWrapper();

        ${entity.base?cap_first} ${entity.base};
        try {
            ${entity.base} = ${entity.base}Service.getById(id);
        } catch (Exception e) {
            logger.error("get ${entity.base?cap_first} entity error, primary key:{}", id, e);
            return responseWrapper.addCodeFailed().addMessage("an error occurred");
        }
        responseWrapper.addData("${entity.base}", ${entity.base});

        return responseWrapper.addCodeSuccess();
    }

    @RequestMapping("/list")
    @ResponseBody
    public ResponseWrapper list() {
        ResponseWrapper responseWrapper = ResponseWrapper.build();

        List<${entity.base?cap_first}VO> list;

        try {
            list = ${entity.base}Service.getAll();
        } catch (Exception e) {
            logger.info("search error,", e);
            return responseWrapper.addCodeFailed().addMessage("an error occurred");
        }

        responseWrapper.addCodeSuccess().addData("list", list);
        return responseWrapper;
    }

    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ResponseWrapper add(HttpServletRequest request,
        <#list entity.properties as property> <#if property.propertyName !="id">       @RequestParam(value = "${entity.base}${property.propertyName?cap_first}") ${property.javaType} ${entity.base}${property.propertyName?cap_first}</#if>  <#if property.propertyName != "id" && property_has_next>,
                </#if></#list>
        ){
        ResponseWrapper responseWrapper = new ResponseWrapper();
        ${entity.base?cap_first}VO ${entity.base}VO = new ${entity.base?cap_first}VO(<#list entity.properties as property><#if property.propertyName !="id">${entity.base}${property.propertyName?cap_first}<#if property_has_next>, </#if></#if></#list>);
        try {
            ${entity.base}Service.insert(${entity.base}VO.toSource());
        } catch (Exception e) {
            logger.info("insert ${entity.base?cap_first} error, ${entity.base}VO:{}", ${entity.base}VO, e);
            responseWrapper.addCodeFailed();
            return responseWrapper;
        }
        return responseWrapper.addCodeSuccess();
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ResponseBody
    public ResponseWrapper update( HttpServletRequest request,
<#list entity.properties as property>            @RequestParam(value = "${entity.base}${property.propertyName?cap_first}") ${property.javaType} ${entity.base}${property.propertyName?cap_first} <#if property_has_next>,
            </#if></#list>
        ){
        ResponseWrapper responseWrapper = new ResponseWrapper();
            ${entity.base?cap_first}VO ${entity.base}VO = new ${entity.base?cap_first}VO(<#list entity.properties as property>${entity.base}${property.propertyName?cap_first}<#if property_has_next>, </#if></#list>);
            try {
                ${entity.base}Service.update(${entity.base}VO.toSource());
            } catch (Exception e) {
                logger.error("update error, ${entity.base}VO:{}", ${entity.base}VO, e);
                return responseWrapper.addCodeFailed().addMessage("失败");
            }
            return responseWrapper.addCodeSuccess();
        }

    @RequestMapping(value = "/delete/batch", method = RequestMethod.POST)
    @ResponseBody
    public ResponseWrapper deleteBatch(HttpServletRequest request,
    @RequestParam(value = "${entity.base}Ids") String ${entity.base}Ids) {
    ResponseWrapper responseWrapper = new ResponseWrapper();
        try {
                ${entity.base}Service.deleteBatch(JSON.parseArray(${entity.base}Ids).toJavaList(Integer.class));
        } catch (Exception e) {
            logger.error("删除配置异常,${entity.base}Ids:{}", ${entity.base}Ids, e);
            return responseWrapper.addCodeFailed().addMessage("失败：" + e.getMessage());
        }
            return responseWrapper.addCodeSuccess();
    }

    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    @ResponseBody
    public ResponseWrapper delete(HttpServletRequest request,
            @RequestParam(value = "${entity.base}Id") Integer ${entity.base}Id) {
        ResponseWrapper responseWrapper = new ResponseWrapper();
        try {
                ${entity.base}Service.delete(${entity.base}Id);
            } catch (Exception e) {
                logger.error("删除配置异常,${entity.base}Id:{}", ${entity.base}Id, e);
                return responseWrapper.addCodeFailed().addMessage("失败：" + e.getMessage());
        }
        return responseWrapper.addCodeSuccess();
    }
}